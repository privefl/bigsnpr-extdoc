[["index.html", "bigsnpr &amp; bigstatsr Extended documentation [WORK IN PROGRESS] About License Author Contact", " bigsnpr &amp; bigstatsr Extended documentation [WORK IN PROGRESS] Florian Privé 2021-03-01 About License This material is licensed under the Creative Commons Attribution-ShareAlike 3.0 License. Author Florian Privé is a postdoc in predictive human genetics, fond of Data Science and an R(cpp) enthusiast. He is also the founder and former organizer of the Grenoble R user group. You can find him on Twitter and GitHub as @privefl and on Stack Overflow as F. Privé. Contact If you want me to add or clarify some content in this documentation, please open an issue on the GitHub repository of this documentation. If you have bug reports or questions specifically on functions of the packages, please open an issue on the corresponding packages repository. I will always redirect you to GitHub issues if you email me about the packages, so that others can benefit from our discussion. "],["introduction.html", "Chapter 1 Introduction 1.1 Main motivation for developing {bigstatsr} and {bigsnpr} 1.2 Installation 1.3 Correct spellings", " Chapter 1 Introduction 1.1 Main motivation for developing {bigstatsr} and {bigsnpr} The main motivation was for me to be able to run all my analyses within . I was frustrated by having to use all these different software, with different input formats, and requiring text files for parameters. This made it hard for me to build a chain of analyses, to perform some exploratory analyses, or to use familiar packages. Also, I wanted to develop new methods, which seemed very hard to do without using a simple matrix-like format. Thus I started developing package {bigsnpr} at the beginning of my thesis. At some point, I realized that many functions (to perform e.g. GWAS, PCA, summary statistics) were not really specific to genotype data. Indeed, a TWAS or an EWAS are not conceptually very different from a GWAS; one can also perform PCA on e.g. DNA methylation data. Therefore I decided to move all these functions that could be used on any data stored as a matrix and build a new package, {bigstatsr}. This is why there are two packages, where {bigstatsr} can basically be used by any field using matrices, while {bigsnpr} provides some tools rather specific to genotype data, largely building on top of {bigstatsr}. The initial description of the two packages is available in Privé et al. (2018). To know which function belongs to which package: functions starting with big_ belongs to {bigstatsr} while functions starting with snp_ or bed_ belongs to {bigsnpr}. 1.2 Installation Both packages are available on CRAN, so you can use install.packages(): install.packages(&quot;bigstatsr&quot;) install.packages(&quot;bigsnpr&quot;) To install the latest versions (from GitHub), you can use {remotes}: # install.packages(&quot;remotes&quot;) remotes::install_github(&quot;privefl/bigstatsr&quot;) remotes::install_github(&quot;privefl/bigsnpr&quot;) As an alternative to {remotes}, you can also try {pak}, which gives more information and solve other issues. 1.3 Correct spellings A friendly reminder:The correct spelling is - bigstatsr  not bigstatr / BIGstatsR - bigsnpr  not BIGsnpR / bigSNPr - pcadapt  not PCAdapt - LDpred  not LDPredThank youThe kittens thank you too pic.twitter.com/S8wyE4G6BG  Florian Privé (remote postdoc) ((privefl?)) November 18, 2020 "],["inputs-and-formats.html", "Chapter 2 Inputs and formats 2.1 In {bigstatsr} 2.2 In {bigsnpr} 2.3 Getting a FBM or bigSNP object", " Chapter 2 Inputs and formats 2.1 In {bigstatsr} The format provided in package {bigstatsr} is called a Filebacked Big Matrix (FBM). It is an on-disk matrix format which is accessed through memory-mapping. Memory-mapping accesses the elements you need from disk to memory when needed. The second time you access the same elements, they are directly accessed from memory while there is enough memory for storing them. When no more memory is available, the OS frees some of the memory to make room for new elements you want to access. Therefore, try to always perform as many operations on a subset of elements since data is accessed from disk only once. All the elements of one FBM have the same type; supported types are: \"double\" (the default, double precision  64 bits) \"float\" (single precision  32 bits) \"integer\" (signed, so between \\(-2^{31}\\) and \\(2^{31} - 1\\)) \"unsigned short\": can store integer values from \\(0\\) to \\(65535\\). \"raw\" or \"unsigned char\": can store integer values from \\(0\\) to \\(255\\). It is the basis for class FBM.code256 in order to access 256 arbitrary different numeric values. It is used in package {bigsnpr} (see below). Standard matrix accessors are implemented for FBMs, so you can e.g. access the first column of X using X[, 1]. You can access the whole FBM as an R matrix in memory using X[]. However, if the matrix is too large to fit in memory, you should always access only a subset of columns. Note that the elements of the FBM are stored column-wise (as for a standard R matrix). Therefore, be careful not to access a subset of rows, since it will read non-contiguous elements from the whole matrix from disk. 2.2 In {bigsnpr} This package uses a class called bigSNP for representing SNP data. A bigSNP object is merely a list with the following elements: $genotypes: A FBM.code256. Rows are samples and columns are variants. This stores genotype calls or dosages (rounded to 2 decimal places). $fam: A data.frame with some information on the individuals. $map: A data.frame with some information on the variants. The code used in class FBM.code256 for imputed data is e.g. bigsnpr::CODE_DOSAGE #&gt; [1] 0.00 1.00 2.00 NA 0.00 1.00 2.00 0.00 0.01 0.02 0.03 0.04 0.05 0.06 #&gt; [15] 0.07 0.08 0.09 0.10 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.20 #&gt; [29] 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.30 0.31 0.32 0.33 0.34 #&gt; [43] 0.35 0.36 0.37 0.38 0.39 0.40 0.41 0.42 #&gt; [ reached getOption(&quot;max.print&quot;) -- omitted 206 entries ] where the first four elements are used to store genotype calls, the next three to store imputed allele counts, and the next 201 values to store dosages rounded to 2 decimal places. This allows for many types of data by storing each elements using only one byte (x4 compared to bed files, but /8 compared to doubles). Since v1.0, package {bigsnpr} also provides functions for directly working on bed files with a few missing values (Privé et al. 2020). If there is a demand for it, I might extend functions in {bigsnpr} to handle more types of FBMs than only FBM.code256. We have started talking about this in this issue. 2.3 Getting a FBM or bigSNP object The easiest way to get an FBM is to use the constructor function FBM() or the converter as_FBM(). To read an FBM from a large text file, you can use function big_read() (see this vignette). To read a bigSNP object from bed/bim/fam files, you can use functions snp_readBed() and snp_readBed2() (the second one allows using only a subset of individuals/variants and using parallelism). To read BGEN files, you can use function snp_readBGEN(). This function takes around 40 minutes to read 1M variants for 400K individuals using 15 cores. Note that works only for BGEN V1.2 with probabilities stored as 8 bits (which is the case of e.g. the UK Biobank files, see this issue). To read any format used in genetics, you can always convert blocks of the data to text files using PLINK, read these using bigreadr::fread2() and filling a part of the resulting FBM. [TODO: export the code to convert from RICOPILI imputed data] "],["references.html", "References", " References Privé, Florian, Hugues Aschard, Andrey Ziyatdinov, and Michael G B Blum. 2018. Efficient Analysis of Large-Scale Genome-Wide Data with Two R Packages: Bigstatsr and Bigsnpr. Bioinformatics 34 (16): 278187. https://doi.org/10.1093/bioinformatics/bty185. Privé, Florian, Keurcien Luu, Michael G B Blum, John J McGrath, and Bjarni J Vilhjálmsson. 2020. Efficient toolkit implementing best practices for principal component analysis of population genetic data. Bioinformatics, May. https://doi.org/10.1093/bioinformatics/btaa520. "]]
