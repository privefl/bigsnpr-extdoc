[["population-structure.html", "Chapter 5 Population structure 5.1 Principal Component Analysis (PCA) 5.2 Exercise: population structure", " Chapter 5 Population structure 5.1 Principal Component Analysis (PCA) PCA on the genotype matrix can be used to capture population structure. PCA can capture different kinds of structure (Privé, Luu, Blum, McGrath, &amp; Vilhjálmsson, 2020): population structure (what we want), LD structure, when there are two many correlated variants and not enough population structure (see this vignette), relatedness structure, when there are related individuals that can cluster together in later PCs, noise, basically just circles when looking at PC scores. Population structure is the second main topic of my research work (after polygenic scores). In Privé, Aschard, Ziyatdinov, &amp; Blum (2018), I introduced an algorithm to compute PCA for a bigSNP object while accounting for the LD problem by using clumping (not pruning, cf. this vignette) and an automatic removal of long-range LD regions. In Privé, Luu, Vilhjálmsson, &amp; Blum (2020), I improved an algorithm to detect variants associated with population structure. In Privé, Luu, Blum, McGrath, &amp; Vilhjálmsson (2020), I extended the package to be also able to run PCA directly on PLINK bed files with a small percentage of missing values, and investigated best practices for PCA in more detail. In Privé et al. (2022) and Privé (2022), I showed how to use PCA for ancestry inference, including grouping individuals in homogeneous ancestry groups, and inferring ancestry proportions from allele frequencies only (see this vignette). 5.2 Exercise: population structure There are many steps to properly perform a PCA, which I will try to detail in the following exercise. You can find another example in this vignette. Let us reuse the data prepared in 4.3. First, let us get an idea of the relatedness in the data using library(bigsnpr) #&gt; Loading required package: bigstatsr (NCORES &lt;- nb_cores()) plink2 &lt;- download_plink2(&quot;tmp-data&quot;) rel &lt;- snp_plinkKINGQC(plink2, &quot;tmp-data/GWAS_data_sorted_QC.bed&quot;, thr.king = 2^-4.5, make.bed = FALSE, ncores = NCORES) hist(log2(rel$KINSHIP), &quot;FD&quot;) When computing relatedness with KING, it may be needed to filter out some variants that are highly associated with population structure, e.g. as performed in the UK Biobank (Bycroft et al., 2018). [TODO: also export my code for iPSYCH] Relatedness should not be a major issue here. Let us now compute PCs. obj.bed &lt;- bed(&quot;tmp-data/GWAS_data_sorted_QC.bed&quot;) obj.svd &lt;- runonce::save_run( bed_autoSVD(obj.bed, k = 12, ncores = NCORES), file = &quot;tmp-data/PCA_GWAS_data.rds&quot;) #&gt; user system elapsed #&gt; 19.51 1.51 145.78 plot(obj.svd) plot(obj.svd, type = &quot;scores&quot;, scores = 1:12, coeff = 0.5) There is some population structure (maybe up to 6 PCs). You should also check loadings to make sure there is no LD structure (peaks on loadings): plot(obj.svd, type = &quot;loadings&quot;, loadings = 1:8, coeff = 0.5) No peaks, but loadings of PC4 and PC5 are a bit odd. If you expect the individuals to mostly come from one population, you can simply use a robust distance to identify a homogeneous subset of individuals, then look at the histogram of log-distances to choose a threshold based on visual inspection (here I would probably choose 4.5). PC &lt;- predict(obj.svd) ldist &lt;- log(bigutilsr::dist_ogk(PC)) hist(ldist, &quot;FD&quot;) library(ggplot2) source(&quot;https://raw.githubusercontent.com/privefl/paper4-bedpca/master/code/plot_grid2.R&quot;) plot_grid2(plotlist = lapply(1:4, function(k) { k1 &lt;- 2 * k - 1 k2 &lt;- 2 * k qplot(PC[, k1], PC[, k2], color = ldist, size = I(2)) + scale_color_viridis_c() + theme_bigstatsr(0.6) + labs(x = paste0(&quot;PC&quot;, k1), y = paste0(&quot;PC&quot;, k2), color = &quot;log-distance&quot;) + coord_equal() }), nrow = 2, legend_ratio = 0.2, title_ratio = 0) It would be nice if we could get a better sense of the ancestry of these individuals. To achieve this, we can project this data onto the PCA space of many known population groups defined in Privé (2022). DIR &lt;- &quot;../datasets&quot; # you can replace by e.g. &quot;data&quot; or &quot;tmp-data&quot; # /!\\ This downloads 850 Mb (each) all_freq &lt;- bigreadr::fread2( runonce::download_file(&quot;https://figshare.com/ndownloader/files/31620968&quot;, dir = DIR, fname = &quot;ref_freqs.csv.gz&quot;)) projection &lt;- bigreadr::fread2( runonce::download_file(&quot;https://figshare.com/ndownloader/files/31620953&quot;, dir = DIR, fname = &quot;projection.csv.gz&quot;)) correction &lt;- c(1, 1, 1, 1.008, 1.021, 1.034, 1.052, 1.074, 1.099, 1.123, 1.15, 1.195, 1.256, 1.321, 1.382, 1.443) library(dplyr) matched &lt;- obj.bed$map %&gt;% transmute(chr = chromosome, pos = physical.pos, a1 = allele1, a0 = allele2) %&gt;% mutate(beta = 1) %&gt;% snp_match(all_freq[1:5]) %&gt;% print() #&gt; chr pos a0 a1 beta _NUM_ID_.ss rsid _NUM_ID_ #&gt; 1 1 752566 G A -1 2 rs3094315 39 #&gt; 2 1 785989 T C -1 4 rs2980300 102 #&gt; 3 1 798959 G A 1 5 rs11240777 128 #&gt; 4 1 947034 G A -1 6 rs2465126 534 #&gt; 5 1 949608 G A 1 7 rs1921 539 #&gt; 6 1 1018704 A G -1 8 rs9442372 666 #&gt; [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 301150 rows ] # further subsetting on missing values counts &lt;- bed_counts(obj.bed, ind.col = matched$`_NUM_ID_.ss`, ncores = NCORES) # hist(nb_na &lt;- counts[4, ]) ind &lt;- which(counts[4, ] &lt; (nrow(obj.bed) * 0.05)) # project individuals (divided by 2) onto the PC space PROJ &lt;- as.matrix(projection[matched$`_NUM_ID_`[ind], -(1:5)]) all_proj &lt;- apply(sweep(PROJ, 2, correction / 2, &#39;*&#39;), 2, function(x) { bed_prodVec(obj.bed, x, ind.col = matched$`_NUM_ID_.ss`[ind], ncores = NCORES, # scaling to get G if beta = 1 and (2 - G) if beta = -1 center = 1 - matched$beta[ind], scale = matched$beta[ind]) }) We can then assign individuals to the closest center: all_centers &lt;- crossprod(as.matrix(all_freq[matched$`_NUM_ID_`[ind], -(1:5)]), PROJ) all_sq_dist &lt;- apply(all_centers, 1, function(one_center) { rowSums(sweep(all_proj, 2, one_center, &#39;-&#39;)^2) }) THR &lt;- 0.005 # you can adjust this threshold thr_sq_dist &lt;- max(dist(all_centers)^2) * THR / 0.16 group &lt;- colnames(all_freq)[-(1:5)] group[group %in% c(&quot;Scandinavia&quot;, &quot;United Kingdom&quot;, &quot;Ireland&quot;)] &lt;- &quot;Europe (North West)&quot; group[group %in% c(&quot;Europe (South East)&quot;, &quot;Europe (North East)&quot;)] &lt;- &quot;Europe (East)&quot; cluster &lt;- group[ apply(all_sq_dist, 1, function(x) { ind &lt;- which.min(x) if (x[ind] &lt; thr_sq_dist) ind else NA }) ] table(cluster, exclude = NULL) # no NA -&gt; all assigned #&gt; cluster #&gt; Ashkenazi Europe (East) Europe (North West) #&gt; 111 148 873 #&gt; Europe (South West) Italy Middle East #&gt; 46 219 4 plot_grid2(plotlist = lapply(1:4, function(k) { k1 &lt;- 2 * k - 1 k2 &lt;- 2 * k qplot(PC[, k1], PC[, k2], color = cluster, size = I(2)) + theme_bigstatsr(0.6) + labs(x = paste0(&quot;PC&quot;, k1), y = paste0(&quot;PC&quot;, k2), color = &quot;Assigned\\npopulation&quot;) + coord_equal() }), nrow = 2, legend_ratio = 0.25, title_ratio = 0) These are mostly European individuals. PC4-PC6 are definitively a bit odd. References Bycroft, C., Freeman, C., Petkova, D., Band, G., Elliott, L.T., Sharp, K.,  others. (2018). The UK Biobank resource with deep phenotyping and genomic data. Nature, 562, 203209. Privé, F. (2022). Using the UK Biobank as a global reference of worldwide populations: application to measuring ancestry diversity from GWAS summary statistics. Bioinformatics, 38, 34773480. Privé, F., Aschard, H., Carmi, S., Folkersen, L., Hoggart, C., OReilly, P.F., &amp; Vilhjálmsson, B.J. (2022). Portability of 245 polygenic scores when derived from the UK Biobank and applied to 9 ancestry groups from the same cohort. The American Journal of Human Genetics, 109, 1223. Privé, F., Aschard, H., Ziyatdinov, A., &amp; Blum, M.G.B. (2018). Efficient analysis of large-scale genome-wide data with two R packages: bigstatsr and bigsnpr. Bioinformatics, 34, 27812787. Privé, F., Luu, K., Blum, M.G., McGrath, J.J., &amp; Vilhjálmsson, B.J. (2020). Efficient toolkit implementing best practices for principal component analysis of population genetic data. Bioinformatics, 36, 44494457. Privé, F., Luu, K., Vilhjálmsson, B.J., &amp; Blum, M.G. (2020). Performing highly efficient genome scans for local adaptation with R package pcadapt version 4. Molecular Biology and Evolution, 37, 21532154. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
